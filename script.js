let CONFIG = {
    PREFER_TO_BE_AFTER: new Date("2020-01-01"),
    PREFER_TO_BE_BEFORE: new Date("2024-01-01"),
    LAST_NAME: 'X',
    LICENSE_NUMBER: 'X',
    KEYWORD: 'X',
    CITY: 'Richmond, BC', /* has to match the city name in the dropdown. Case sensitive. */
    LOCATION: 'Richmond driver licensing' /* has to match the location name in the list. Case sensitive. */
}

let aborted = false;

const abort = () => aborted = true;

const utils = {
    $: async (selector, text, parentDom = null, _retry = 0, _all = false) => {
        if (aborted) throw new Error("Aborted");

        let elements = parentDom ? parentDom.querySelectorAll(selector) : document.querySelectorAll(selector);

        const filterWithText = () => {
            elements = Array.prototype.filter.call(elements, function (element) {
                return RegExp(text).test(element.textContent);
            });
        };
        text && filterWithText();

        if (elements.length >= 1) {
            return _all ? elements : elements[0];
        } else if (_retry < 20) {
            console.debug(`retrying ${selector} ${text}`);
            await new Promise(resolve => setTimeout(resolve, 500));
            return await $(selector, text, parentDom, _retry + 1, _all);
        } else {
            throw new Error(`Cannot find element ${selector} ${text}`);
        }
    },

    $$: async (selector, text, parentDom = null, _retry = 0,) => {
        return utils.$(selector, text, parentDom, _retry, true)
    },

    /**
     * Credit to https://github.com/bitwarden/browser
     */
    normalizeEvent: (el, eventName) => {
        let ev;
        if ('KeyboardEvent' in window) {
            ev = new window.KeyboardEvent(eventName, {
                bubbles: true,
                cancelable: false,
            });
        } else {
            ev = el.ownerDocument.createEvent('Events');
            ev.initEvent(eventName, true, false);
            ev.charCode = 0;
            ev.keyCode = 0;
            ev.which = 0;
            ev.srcElement = el;
            ev.target = el;
        }
        return ev;
    },

    /**
     * Credit to https://github.com/bitwarden/browser
     */
    setValueForElementByEvent: (el) => {
        const valueToSet = el.value,
            ev1 = el.ownerDocument.createEvent('HTMLEvents'),
            ev2 = el.ownerDocument.createEvent('HTMLEvents');

        el.dispatchEvent(utils.normalizeEvent(el, 'keydown'));
        el.dispatchEvent(utils.normalizeEvent(el, 'keypress'));
        el.dispatchEvent(utils.normalizeEvent(el, 'keyup'));
        ev2.initEvent('input', true, true);
        el.dispatchEvent(ev2);
        ev1.initEvent('change', true, true);
        el.dispatchEvent(ev1);
        el.blur();
        el.value !== valueToSet && (el.value = valueToSet);
    },

    beep: () => {
        // https://www.freesoundslibrary.com/notification-melody/ and https://online-audio-converter.com and https://base64.guru/converter/encode/audio/
        const snd = new Audio("data:audio/mp3;base64,");
        // play the notification sound 3 times
        snd.play();
        var intervalID = setInterval(snd.play, 2200);
        setTimeout(function(){ clearInterval(intervalID); }, 2200 * 2)
    },
}

const ICBCSite = {
    gotoLoginPage: async function () {
        if (document.URL.includes('/webdeas-ui/home')) {
            const nextButton = await $('button', 'Next');
            nextButton.click();
        }
    },

    login: async ({LAST_NAME: lastName, LICENSE_NUMBER: licenseNumber, KEYWORD: keyword}) => {
        try {
            const driverNameInput = await $('input[aria-label="driver-name"]');
            driverNameInput.value = lastName;
            utils.setValueForElementByEvent(driverNameInput);

            const driverLicenseInput = await $('input[aria-label="driver-licence"]');
            driverLicenseInput.value = licenseNumber;
            utils.setValueForElementByEvent(driverLicenseInput);

            const keywordInput = await $('input[aria-label="keyword"]');
            keywordInput.value = keyword;
            utils.setValueForElementByEvent(keywordInput);

            const agreementCheckbox = await $('input[type="checkbox"]')
            agreementCheckbox.click();

            const signInButton = await $('button', 'Sign in');
            signInButton.click();
            
            // const errorMessage = '.error-message';
            // const buttonExistsInNextPage = '.raised-button';
            // let dom;
            // do {
            //     dom = await $(`${errorMessage}, ${buttonExistsInNextPage}`);
            //     await new Promise(resolve => setTimeout(resolve, 500));
            //     const signInButton = await $('button', 'Sign in');
            //     signInButton.click();
            // } while (dom.classList.contains(errorMessage))
        } catch (e) {
            if (!aborted) {
                console.log(`Cannot login. Retrying now... ${e}`);
                if (document.URL.includes('/webdeas-ui/login;type=driver')) {
                    const backButton = await $('button', 'Back');
                    backButton.click();
                }
                await ICBCSite.gotoLoginPage();
            }
        }
    },

    signout: async () => {
        if (document.URL.includes('/webdeas-ui/home')) return;

        try {
            const signOutButton = await $('button', 'Sign Out');
            signOutButton.click();
        } catch (e) {
            console.debug('Cannot sign out. Maybe it is already in sign out state')
        }
    },

    gotoBookingTab: async function () {
        const rescheduleButton = await $('button', 'Reschedule appointment');
        rescheduleButton.click();
        const yesButton = await $('mat-dialog-container button', 'Yes');
        yesButton.click();
    },

    pickLocation: async ({CITY, LOCATION}) => {
        const locationInput = await $('input[aria-label="Number"]');
        locationInput.value = CITY;
        locationInput.focus();
        locationInput.click();
        locationInput.focus();
        locationInput.click();
        utils.setValueForElementByEvent(locationInput);

        const locationSpan = await $('span', CITY);
        locationSpan.click()  // select dropdown

        const searchButton = await $('button', 'Search');
        searchButton.click()  // select dropdown
        const departmentTitle = await $('.department-title', LOCATION)
        departmentTitle.click();
    },

    buildAppointmentList: async () => {
        const appointmentListings = [];

        /* build appointment listings */

        /**
         * Parse into a date string that Date object takes
         * @param {String} titleString. format example: 'Friday, July 8th, 2022', 'Wednesday, July 13th, 2022'
         * @returns {String} 'Friday, July 8, 2022', 'Wednesday, July 13, 2022'
         */
        const parseDateTitle = titleString => titleString.replace(/(\d+)\w+,/, '$1,');

        const dateBlockDom = await $$('.appointment-listings').then(nodeList => Array.from(nodeList));
        if (document.querySelector('.appointment-listings > span')) {
            dateBlockDom.push(...await $$('.appointment-listings > span').then(nodeList => Array.from(nodeList)));
        }

        // assume it is already sorted
        for (const dateSpan of dateBlockDom) {
            const dateTitleDom = await $('.date-title', null, dateSpan);
            const dateString = parseDateTitle(dateTitleDom.innerText);

            const timeButtons = await $$(':scope > mat-button-toggle', null, dateSpan);
            timeButtons.forEach(timeButton => {
                const newDate = new Date(dateString);
                const [hours, min, period] = timeButton.innerText.split(/[: ]/);
                newDate.setHours(parseInt(hours) + (period.toLowerCase() === 'pm' ? 12 : 0), parseInt(min), 0, 0);
                appointmentListings.push(newDate);
            });
        }

        return appointmentListings;
    },

    checkDate: async (previousAppointmentList = null) => {
        const selectedLocationDom = await $('.background-highlight.clicked')
        if (!selectedLocationDom) {
            console.warn("Are you sure you already selected a location? There should be a yellowish background once you click on it");
            return
        } else {
            await selectedLocationDom.click();    // clicking on the location
        }

        const appointmentListingSelector = '.appointment-listings';
        const noAppointmentMsgClass = 'no-appts-msg';
        const refreshingClass = 'searching';
        const errorClass = 'error-msg';
        const homePageSelector = 'app-home';
        let dom;

        do {
            await new Promise(resolve => setTimeout(resolve, 500));
            dom = await $(`${appointmentListingSelector}, .${noAppointmentMsgClass}, .${refreshingClass}, .${errorClass}, ${homePageSelector}`);    // wait for result to show
        } while (dom.classList.contains(refreshingClass))

        if (dom.classList.contains(errorClass)) {
            console.debug(`ICBC system error. Signing out and re-login...`);
            await restart()
            return;
        }

        if (dom.classList.contains(noAppointmentMsgClass)) {
            console.log(`No appointment at the moment. Refreshing now...`);
            await ICBCSite.checkDate(null);
            return;
        }

        if (dom.tagName.toLowerCase() === homePageSelector) {
            console.debug(`Login expired. Re-logging in...`);
            await main();
            return;
        }

        const appointmentListings = await ICBCSite.buildAppointmentList();
        const haveUpdate = appointmentListings?.length !== previousAppointmentList?.length || appointmentListings.some((date, i) => Date.parse(date) !== Date.parse(previousAppointmentList[i]));

        if (haveUpdate) {
            console.table(appointmentListings);
            const result = CONFIG.PREFER_TO_BE_AFTER < appointmentListings[0] && appointmentListings[0] < CONFIG.PREFER_TO_BE_BEFORE;
            if (result) {
                utils.beep();
                console.warn(`Booking now: ${appointmentListings[0]}. NOW VERIFY THE EMAIL!!!!!`);
                await ICBCSite.proceedWithBooking();
                return
            }
        }

        await ICBCSite.checkDate(appointmentListings); // recursion
    },

    proceedWithBooking: async () => {
        try {
            const firstTimeButton = await $('.dialog.container .mat-button-toggle-button');
            await firstTimeButton.click();

            const reviewAppointmentButton = await $('.dialog.container .mat-raised-button');
            await reviewAppointmentButton.click();

            await new Promise(resolve => setTimeout(resolve, 100));
            const nextButton = await $('.details .mat-raised-button');
            await nextButton.click();

            await new Promise(resolve => setTimeout(resolve, 100));
            const submitButton = await $('.mat-raised-button[type="submit"]');
            await submitButton.click();

            // Now landing on Verification page
        } catch (e) {
            console.warn(`You might need to manually continue the booking ${e}`);
        }
    }
}

const restart = async () => {
    console.debug('Restarting...')
    await ICBCSite.signout();
    await main();
}

const main = async () => {
    if (document.URL.includes('/webdeas-ui/home')) await ICBCSite.gotoLoginPage();
    if (document.URL.includes('/webdeas-ui/login;type=driver')) await ICBCSite.login(CONFIG);
    try {
        if (!document.URL.includes('/webdeas-ui/booking')) await ICBCSite.gotoBookingTab();
        await ICBCSite.pickLocation(CONFIG);
        await ICBCSite.checkDate();
    } catch (e) {
        if (!aborted) await restart();
    }

};

const $$ = utils.$$;
const $ = utils.$;

await main();
